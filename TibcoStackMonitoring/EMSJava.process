<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <pd:name>EMSJava.process</pd:name>
    <pd:startName>HTTP Receiver</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="HTTP Receiver">
        <pd:type>com.tibco.plugin.http.HTTPEventSource</pd:type>
        <pd:resourceType>httppalette.httpEventSource</pd:resourceType>
        <pd:x>115</pd:x>
        <pd:y>88</pd:y>
        <config>
            <outputMode>String</outputMode>
            <defaultEncoding>UTF8</defaultEncoding>
            <inputOutputVersion>5.3.0</inputOutputVersion>
            <newMimeSupport>true</newMimeSupport>
            <sharedChannel>/EMS HTTP.sharedhttp</sharedChannel>
            <customField>
                <row>
                    <attribute>last</attribute>
                    <attributeType>string</attributeType>
                    <attributeCard>optional</attributeCard>
                </row>
            </customField>
            <Headers>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Accept" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Accept-Charset" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Accept-Encoding" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Type" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Length" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Connection" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Cookie" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Pragma" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </Headers>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>753</pd:endX>
    <pd:endY>96</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1514400948639</pd:targetNamespace>
    <pd:activity name="invoke">
        <pd:type>com.tibco.plugin.java.JavaActivity</pd:type>
        <pd:resourceType>ae.javapalette.javaActivity</pd:resourceType>
        <pd:x>266</pd:x>
        <pd:y>90</pd:y>
        <config>
            <fileName>EMSJavainvoke</fileName>
            <packageName>EMSJava</packageName>
            <fullsource>package EMSJava;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.InetAddress;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;

import com.tibco.tibjms.admin.ConnectionInfo;
import com.tibco.tibjms.admin.ConsumerInfo;
import com.tibco.tibjms.admin.ProducerInfo;
import com.tibco.tibjms.admin.QueueInfo;
import com.tibco.tibjms.admin.ServerInfo;
import com.tibco.tibjms.admin.TibjmsAdmin;
import com.tibco.tibjms.admin.TopicInfo;

@SuppressWarnings("deprecation")
public class EMSJavainvoke{

	protected static volatile long now = System.currentTimeMillis();
	private static ExecutorService es = null;
	private final static ConcurrentLinkedQueue&lt;String&gt; result = new ConcurrentLinkedQueue&lt;&gt;();
	private final static ConcurrentLinkedQueue&lt;String&gt; errors = new ConcurrentLinkedQueue&lt;&gt;();	
	private static EMSJavainvoke INSTANCE = null;

	protected int threadPoolCount = 24;
	protected String connectionStrings = "admin=@localhost:7222";
	
	private static synchronized ExecutorService getExecutorService(int threadCount) {
		if (es==null)
			es = Executors.newFixedThreadPool(threadCount);
		return es;
	}
	
	private final static class ConnectionParamsHolder {
		public String url;
		public String user;
		public String pass;
		
		public static List&lt;ConnectionParamsHolder&gt; fromString(String connString) throws Exception {
			String header = "["+ConnectionParamsHolder.class.getName()+"] ";
			LinkedList&lt;ConnectionParamsHolder&gt; list = new LinkedList&lt;&gt;();
			for (String s : connString.split("\\;")) {
				String[] upHost = s.split("\\@");
				ConnectionParamsHolder ci = new ConnectionParamsHolder();
				ci.url = upHost[1];
				String[] up = upHost[0].split(upHost[0].contains("=") ? "\\=" : "\\:");
				ci.user = up[0];
				ci.pass = up.length &gt; 1 ? up[1] : null;	
				if (ci.pass!=null &amp;&amp; ci.pass.startsWith("$")) {
					ci.pass = com.tibco.pe.plugin.PluginProperties.getProperty("tibco.clientVar."+ci.pass.substring(1));
				}			
				list.add(ci);
				System.out.println(header + " connection "+ci);
			}
			return list;
		}
		
		public String toString() {
			return user+"@"+url;
		}
	}
	
	private final static String exceptionToString(Throwable exc) {
		StringWriter sw = new StringWriter();
    		PrintWriter pw = new PrintWriter(sw);
    		pw.append(exc.getMessage()).append(" -&gt; ");
    		exc.printStackTrace(pw);
    		pw.flush();
    		sw.flush();
    		return sw.toString();
	}	
	
	public final static double roundDouble(double d, int places) {
		BigDecimal bd = new BigDecimal(d);
	    	bd = bd.setScale(places, RoundingMode.HALF_UP);
	    	return bd.doubleValue();
	}
	
	public static class EmsStatsExtractor implements Runnable {
		
		private Method m = null;
		private CountDownLatch sync = null;
		private TibjmsAdmin admin = null;
		private String node = null;
		
		public EmsStatsExtractor(Method m, TibjmsAdmin admin, CountDownLatch sync, String node) {
			this.m = m;
			this.sync = sync;
			this.admin = admin;
			this.node = node;
		}
		public String getName() {
			return m.getName();
		}
		
		private boolean isInfoUseful(Object data) {
			String clazz = data.getClass().getName();
			if (clazz.contains("ConnectionFactoryInfo") || clazz.contains(".GroupInfo") || clazz.contains(".UserInfo") || clazz.contains("VersionInfo"))
				return false;
			if (clazz.endsWith("Info"))
				return true;
			String info = data.toString();
			if (info.length()==0 || Character.isDigit(info.charAt(0)) || info.startsWith("$"))
				return false;						
			return false;
		}
		
		public void run() {
			try {
				Object res = m.invoke(admin, new Object[] {});
				LinkedList&lt;Object&gt; toProcess = new LinkedList&lt;&gt;();
				toProcess.add(res);
				while (!toProcess.isEmpty()) {
					Object head = toProcess.remove();
					try {
						Object[] tab = (Object[])head;
						for (Object obj : tab) {
							toProcess.add(obj);
						}						
					}
					catch (Exception notTable) {
						if (isInfoUseful(head)) {
							String data = prepareData(head, node);
							if (data!=null) {
								System.out.println(data);
								result.add(data);
							}
						}
					}
				}
			}
			catch (Throwable e) {
				if (e.getCause()!=null)
					e = e.getCause();
				errors.add(exceptionToString(e));
			}
			finally {
				sync.countDown();
			}
		}	
	}

	public static class EmsStats {
		String nameOrDesc = "";
		int opTime = 0;
		static String host = null;
		
		static {
			try {
				host = InetAddress.getLocalHost().getCanonicalHostName();
			}
			catch (Exception e) {};
		}
	
		private TreeMap&lt;String, Object&gt; getDataInMap() {
			TreeMap&lt;String,Object&gt; data = new TreeMap&lt;String,Object&gt;();
			data.put("opTime", opTime);
			return data;
		}
		
		public String toPrometheusString() {
			StringBuilder sb = new StringBuilder();
			for (Map.Entry&lt;String,Object&gt; entry : getDataInMap().entrySet()) {
				sb.append("Tibco_"+entry.getKey()).append(" { component=\"").append(nameOrDesc).append("\", host=\"").append(host)
				.append("\" } ").append(entry.getValue()).append(" ").append(now).append("\n");
			}			
			return sb.toString();	
		}
	}		
	
	public void invokeService() {	
		now = System.currentTimeMillis();
		List&lt;Method&gt; list = new LinkedList&lt;&gt;();
		List&lt;TibjmsAdmin&gt; adminList = new LinkedList&lt;&gt;();
		List&lt;ConnectionParamsHolder&gt; cphList = new LinkedList&lt;&gt;();
		
		try {
			cphList.addAll(ConnectionParamsHolder.fromString(connectionStrings));
			for (ConnectionParamsHolder cph : cphList) {
				adminList.add(new TibjmsAdmin(cph.url, cph.user, cph.pass));
			}
			for (Method m : adminList.get(0).getClass().getDeclaredMethods()) {
				if (m./*getParameterCount()*/getParameterTypes().length==0 &amp;&amp; m.getName().startsWith("get")) {
					if (!m.getName().endsWith("getJACIInfo") &amp;&amp; !m.getName().endsWith("getConfiguration"))
						list.add(m);
				}
			}
			CountDownLatch sync = new CountDownLatch(list.size() * adminList.size());
			es = getExecutorService(threadPoolCount);
			for (final Method m : list) {
				for (int i=0; i &lt; adminList.size(); i++)
					es.execute(new EmsStatsExtractor(m, adminList.get(i), sync, cphList.get(i).url));		
			}
			try {
				int timeout = Integer.parseInt(com.tibco.pe.plugin.PluginProperties.getProperty("tibco.clientVar.queryTimeoutSeconds"));
				sync.await(timeout, TimeUnit.SECONDS);
			}
			catch (Throwable e) {
				errors.add("Timeout missed while waiting for all results: "+e);
			}
			
			StringBuilder sb = new StringBuilder();		
			while (result.size() &gt; 0) {
				String emsStat = result.remove();
				sb.append(emsStat);
			}
			content = sb.toString();
			errorMessages = errors.toString();
			errors.clear();
		}
		catch (Throwable e) {
			e.printStackTrace();
			errors.add(exceptionToString(e));
			errorMessages = errors.toString();
		}
		finally {
			for (TibjmsAdmin admin : adminList) {
				if (admin!=null) {
					try {
						admin.close();
					}
					catch (Exception ex) {}
				}
			}
		}
	}
	
	private final static String getFieldByMethod(String field, Object object) {
		for (String mthName : new String[] { "get"+field, "is"+field } ) {
			try {
				Method m = object.getClass().getDeclaredMethod(mthName, new Class[] {});
				m.setAccessible(true);
				return m.invoke(object, new Object[] {}) + "";
			}
			catch (Exception exc) {}
			try {
				Method m = object.getClass().getMethod(mthName, new Class[] {});
				m.setAccessible(true);
				return m.invoke(object, new Object[] {}) + "";				
			}
			catch (Exception exc) {}
		}
		return null;
	}
	
	private final static String getField(String field, Object object) {
		String fieldName = field.split("\\.")[0];
		Object ret = null;
		Class&lt;?&gt; clazz = object.getClass();
		boolean found = false;
		while (!Object.class.equals(clazz)) {
			try {
				Field f = clazz.getField(fieldName);
				f.setAccessible(true);
				ret = f.get(object);	
				found = true;
			}
			catch (Exception e) {}
			if (ret==null) {
				try {
					Field f = clazz.getDeclaredField(fieldName);
					f.setAccessible(true);
					ret = f.get(object);
					found = true;
				}
				catch (Exception e) {}
			}
			if (ret!=null)
				break;
			clazz = clazz.getSuperclass();
		}
		if (field.indexOf('.')!=-1 &amp;&amp; ret!=null) {
			String nextField = field.substring(field.indexOf('.')+1);
			// field.subfield or field.getSubfield &lt;=&gt; field.Subfield
			return Character.isLowerCase(nextField.charAt(0)) ? getField(nextField, ret) : getFieldByMethod(nextField, ret);
		}
		return ret==null ? (found ? "" : null) : ret+"";
	}
	
	public final static String getMetrics(Object data, String node, String[] labels, String... metrics) {
		String[] classTokens = data.getClass().getName().split("\\.");
		String name = classTokens[classTokens.length-1];
		HashMap&lt;String,String&gt; retrievedLabels = new HashMap&lt;&gt;();
		HashMap&lt;String,String&gt; retrievedMetrics = new HashMap&lt;&gt;();
		
		for (String label : labels) {
			String lbl = getFieldByMethod(label, data);
			if (lbl!=null) {
				if (label.contains("Name") &amp;&amp; lbl.startsWith("$TMP"))
					return null;
				retrievedLabels.put(label, lbl);
			}
		}
		retrievedLabels.put("node", node);
		for (String metric : metrics) {
			String value = Character.isLowerCase(metric.charAt(0)) ? getField(metric, data) : getFieldByMethod(metric, data);
			if (value!=null) {
				if (value.length()&gt;0)
					retrievedMetrics.put(metric, "true".equals(value) ? "1" : ("false".equals(value) ? "0" : value));
			}
			else
				System.err.println("Ooops, field not found: "+metric+", class: "+data.getClass().getName()+" =&gt; "+data);			
		}
		StringBuilder sb = new StringBuilder();
		for (Map.Entry&lt;String, String&gt; en : retrievedMetrics.entrySet()) {
			String[] tokens = en.getKey().replace("instat.", "in.").replace("outstat.", "out.").replace("details.", "").split("\\.");
			sb.append("Ems").append(name.replace("Info", ""));
			for (String token : tokens) {
				token = token.replace("sent", "Sent").replace("size", "Size").replace("acked", "Acked").replace("num", "Num");
				if (token.length() &gt; 0)
					sb.append(token.substring(0, 1).toUpperCase()).append(token.substring(1));
				else {
					System.out.println("Invalid token: "+en.getKey()+" -&gt; "+token);
				}
			}
			sb.append(" { ");
			for (Map.Entry&lt;String, String&gt; ent : retrievedLabels.entrySet()) {
				sb.append(ent.getKey()).append("=\"").append(ent.getValue()).append("\", ");
			}
			if (labels.length &gt; 0)
				sb.setLength(sb.length()-2);
			sb.append(" } ").append(en.getValue()).append(" ").append(System.currentTimeMillis()).append("\n");
		}
		return sb.toString();
	}
	
	public static String prepareData(Object head, String node) {		
		if (head instanceof ServerInfo) {
			return getMetrics(head, node, new String[] { "URL" }, "DurableCount", "PendingMessageCount", "PendingMessageSize", "ConsumerCount", "State", "OverallSyncProgress", "UpTime", "QueueCount", "TopicCount", "ConnectionCount", "SessionCount", "ProducerCount", "InboundMessageCount", "OutboundMessageCount", "InboundMessageRate", "OutboundMessageRate", "InboundBytesRate", "OutboundBytesRate", "LogFileSize", "SyncDBSize", "AsyncDBSize", "MsgMem", "MsgMemPooled", "DiskReadRate", "DiskWriteRate", "DiskReadOperationsRate", "DiskWriteOperationsRate", "DurableCount", "PendingMessageCount", "PendingMessageSize", "ConsumerCount");
		}
		else if (head instanceof QueueInfo) {
			return getMetrics(head, node, new String[] { "Name" }, "ReceiverCount", "DeliveredMessageCount", "InTransitMessageCount", "PendingMessageCount", "PendingMessageSize", "PendingPersistentMessageCount", "PendingPersistentMessageSize", "ConsumerCount", "instat.ByteRate", "instat.MessageRate", "instat.TotalBytes", "instat.TotalMessages", "outstat.ByteRate", "outstat.MessageRate", "outstat.TotalBytes", "outstat.TotalMessages");
		}
		else if (head instanceof TopicInfo) {
			return getMetrics(head, node, new String[] { "Name" }, "SubscriptionCount", "DurableSubscriptionCount", "SubscriberCount", "DurableCount", "ActiveDurableCount", "PendingMessageCount", "PendingMessageSize", "PendingPersistentMessageCount", "PendingPersistentMessageSize", "ConsumerCount", "instat.ByteRate", "instat.MessageRate", "instat.TotalBytes", "instat.TotalMessages", "outstat.ByteRate", "outstat.MessageRate", "outstat.TotalBytes", "outstat.TotalMessages");
		}
		else if (head instanceof ConnectionInfo) {
			return getMetrics(head, node, new String[] { "ID", "URL", "Address" }, "ConsumerCount", "UncommittedCount", "UncommittedSize", "UpTime", "SessionCount", "ProducerCount", "StartTime", "Started" );
		}
		else if (head instanceof ProducerInfo) {
			return getMetrics(head, node, new String[] { "ID", "Username", "DestinationName" }, "stat.ByteRate", "stat.MessageRate", "stat.TotalBytes", "stat.TotalMessages", "CreateTime" );
		}
		else if (head instanceof ConsumerInfo) {		 
			return getMetrics(head, node, new String[] { "ID", "Username", "DestinationName" }, "PendingMessageCount", "PendingMessageSize", "CreateTime", "details.predlv", "details.sentnum", "details.sentsize", "details.lastsent", "details.lastacked", "details.totalsent", "details.totalacked", "stat.ByteRate", "stat.MessageRate", "stat.TotalBytes", "stat.TotalMessages", "Connected" );
		}
		return null;
	}
	
	private void configureParameter(String name) {
		String header = "["+this.getClass().getName()+"] ";
		String valueStr = com.tibco.pe.plugin.PluginProperties.getProperty("tibco.clientVar."+name);

		if (name.contains("String")) {
			try {
				Field f = this.getClass().getDeclaredField(name);
				if (valueStr.length() &gt; 0)
					f.set(this, valueStr);
				System.out.println(header+"Using "+name+": "+f.get(this));
				return;
			}
			catch (Exception e) {
				System.out.println(header+"Invalid parameter value for "+name+"; exception="+e.getMessage());
			}
		}
		
		try {
			Integer value = Integer.valueOf(com.tibco.pe.plugin.PluginProperties.getProperty("tibco.clientVar."+name));
			Field f = this.getClass().getDeclaredField(name);
			if (value!=-1)
				f.set(this, value);
			System.out.println(header+"Using "+name+": "+f.get(this));
		}
		catch (Exception e) {
			System.out.println(header+"Invalid parameter value for "+name+": "+valueStr+"; exception="+e.getMessage());
		}
	}


	private EMSJavainvoke configure() {
		String options = "connectionStrings threadPoolCount";
		for (String s : options.split("\\ "))
			configureParameter(s);
		return this;
	}
	
	private static synchronized EMSJavainvoke getInstance() {
		if (INSTANCE!=null)
			return INSTANCE;
		return (INSTANCE = new EMSJavainvoke().configure());		
	}
	
/****** START SET/GET METHOD, DO NOT MODIFY *****/
	protected String last = "";
	protected String path = "";
	protected String content = "";
	protected String contentType = "";
	protected String errorMessages = "";
	public String getlast() {
		return last;
	}
	public void setlast(String val) {
		last = val;
	}
	public String getpath() {
		return path;
	}
	public void setpath(String val) {
		path = val;
	}
	public String getcontent() {
		return content;
	}
	public void setcontent(String val) {
		content = val;
	}
	public String getcontentType() {
		return contentType;
	}
	public void setcontentType(String val) {
		contentType = val;
	}
	public String geterrorMessages() {
		return errorMessages;
	}
	public void seterrorMessages(String val) {
		errorMessages = val;
	}
/****** END SET/GET METHOD, DO NOT MODIFY *****/
	public EMSJavainvoke() {
	}
	public void invoke() throws Exception {
/* Available Variables: DO NOT MODIFY
	In  : String last
	In  : String path
	Out : String content
	Out : String contentType
	Out : String errorMessages
* Available Variables: DO NOT MODIFY *****/

if (path==null || path.trim().length()==0 || path.equals("/") || path.equals("/favicon.ico")) {
	contentType = "text/html; charset=UTF-8";
	content = "&lt;html&gt;&lt;body&gt;&lt;h3&gt;This is TibcoEMSExporter exposing &lt;a href='/metrics?last=true'&gt;metrics&lt;/a&gt;&lt;/h3&gt;&lt;/body&gt;";
	return;
}

contentType = "text/plain; version=0.0.4";
if ("1".equals(last) || "true".equalsIgnoreCase(last) || "yes".equalsIgnoreCase(last))
		;
else
	getInstance().invokeService();
content = getInstance().content;
errorMessages = getInstance().errorMessages;
}
}
</fullsource>
            <inputData>
                <row>
                    <fieldName>last</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
                <row>
                    <fieldName>path</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </inputData>
            <outputData>
                <row>
                    <fieldName>content</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
                <row>
                    <fieldName>contentType</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
                <row>
                    <fieldName>errorMessages</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </outputData>
            <byteCode>
                <class>
                    <name>EMSJavainvoke$ConnectionParamsHolder</name>
                    <byteCode>yv66vgAAADMAfgoAIgA9BwA+CgACAD0IAD8KAAIAQAcAQgoAQwBECABFCgACAEYHAEcKAAoAPQgASAoASQBKCABLCgAGAD0JAAYATAgATQoASQBOCABPCABQCQAGAFEJAAYAUggAUwoASQBUCABVCgBJAFYKAFcAWAoACgBZCQBaAFsIAFwKAAIAXQoAXgBfCABgBwBhAQADdXJsAQASTGphdmEvbGFuZy9TdHJpbmc7AQAEdXNlcgEABHBhc3MBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKZnJvbVN0cmluZwEAJChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9MaXN0OwEADVN0YWNrTWFwVGFibGUHAGIHAEcHAGMHAGMHAEIBAApFeGNlcHRpb25zBwBkAQAJU2lnbmF0dXJlAQAWQ29ubmVjdGlvblBhcmFtc0hvbGRlcgEADElubmVyQ2xhc3NlcwEAVChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9MaXN0PExFTVNKYXZhL0VNU0phdmFpbnZva2UkQ29ubmVjdGlvblBhcmFtc0hvbGRlcjs+OwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQASRU1TSmF2YWludm9rZS5qYXZhDAAnACgBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAAVsMAGUAZgcAZwEALEVNU0phdmEvRU1TSmF2YWludm9rZSRDb25uZWN0aW9uUGFyYW1zSG9sZGVyBwBoDABpADoBAAJdIAwAOQA6AQAUamF2YS91dGlsL0xpbmtlZExpc3QBAAJcOwcAYgwAagBrAQACXEAMACMAJAEAAT0MAGwAbQEAAlw9AQACXDoMACUAJAwAJgAkAQABJAwAbgBvAQAQdGliY28uY2xpZW50VmFyLgwAcABxBwByDABzAHQMAHUAdgcAdwwAeAB5AQAMIGNvbm5lY3Rpb24gDABlAHoHAHsMAHwAfQEAAUABABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAE1tMamF2YS9sYW5nL1N0cmluZzsBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAVRU1TSmF2YS9FTVNKYXZhaW52b2tlAQAPamF2YS9sYW5nL0NsYXNzAQAHZ2V0TmFtZQEABXNwbGl0AQAnKExqYXZhL2xhbmcvU3RyaW5nOylbTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAApzdGFydHNXaXRoAQAVKExqYXZhL2xhbmcvU3RyaW5nOylaAQAJc3Vic3RyaW5nAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQAkY29tL3RpYmNvL3BlL3BsdWdpbi9QbHVnaW5Qcm9wZXJ0aWVzAQALZ2V0UHJvcGVydHkBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAA2FkZAEAFShMamF2YS9sYW5nL09iamVjdDspWgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBAC0oTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAwAAYAIgAAAAMAAQAjACQAAAABACUAJAAAAAEAJgAkAAAAAwACACcAKAABACkAAAAdAAEAAQAAAAUqtwABsQAAAAEAKgAAAAYAAQAAADsACQArACwAAwApAAACCAAEAAoAAAD6uwACWbcAAxIEtgAFEwAGtgAHtgAFEgi2AAW2AAlMuwAKWbcAC00qEgy2AA1OLb42BAM2BRUFFQSiAMAtFQUyOgYZBhIOtgANOge7AAZZtwAPOggZCBkHBDK1ABAZBwMyGQcDMhIRtgASmQAIEhOnAAUSFLYADToJGQgZCQMytQAVGQgZCb4EpAAKGQkEMqcABAG1ABYZCLQAFsYAMxkItAAWEhe2ABiZACYZCLsAAlm3AAMSGbYABRkItAAWBLYAGrYABbYACbgAG7UAFiwZCLYAHFeyAB27AAJZtwADK7YABRIetgAFGQi2AB+2AAm2ACCEBQGn/z8ssAAAAAIAKgAAAD4ADwAAAEEAHgBCACYAQwBBAEQASgBFAFMARgBcAEcAeABIAIEASQCVAEoAqgBLAM0ATQDUAE4A8gBDAPgAUAAtAAAAuAAH/wA0AAYHAC4HAC4HAC8HADABAQAA/wA8AAkHAC4HAC4HAC8HADABAQcALgcAMQcAMgABBwAu/wABAAkHAC4HAC4HAC8HADABAQcALgcAMQcAMgACBwAuBwAu/wAdAAoHAC4HAC4HAC8HADABAQcALgcAMQcAMgcAMQABBwAy/wAAAAoHAC4HAC4HAC8HADABAQcALgcAMQcAMgcAMQACBwAyBwAuOv8AKgADBwAuBwAuBwAvAAAAMwAAAAQAAQA0ADUAAAACADgAAQA5ADoAAQApAAAANgACAAEAAAAeuwACWbcAAyq0ABW2AAUSIbYABSq0ABC2AAW2AAmwAAAAAQAqAAAABgABAAAAVAACADsAAAACADwANwAAAAoAAQAGAEEANgAa</byteCode>
                </class>
                <class>
                    <name>EMSJavainvoke$EmsStats</name>
                    <byteCode>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</byteCode>
                </class>
                <class>
                    <name>EMSJavainvoke$EmsStatsExtractor</name>
                    <byteCode>yv66vgAAADMApgoAFgBHCQAqAEgJACoASQkAKgBKCQAqAEsKAEwATQoAFgBOCgBPAE0IAFAKAFEAUggAUwgAVAgAVQgAVgoAUQBXCgAWAFgKAFEAWQoAUQBaCgBbAFwIAF0KAFEAXgcAXwoATABgBwBhCgAYAEcKABgAYgoAGABjCgAYAGQHAGUHAGYKACoAZwoAaABpCQBqAGsKAGwAbQoAaABuCgBvAGIKAHAAcQcAcgoAJgBzCgBoAHQKAGgAdQcAdgcAeQEAAW0BABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEABHN5bmMBACVMamF2YS91dGlsL2NvbmN1cnJlbnQvQ291bnREb3duTGF0Y2g7AQAFYWRtaW4BACRMY29tL3RpYmNvL3RpYmptcy9hZG1pbi9UaWJqbXNBZG1pbjsBAARub2RlAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ+AQB4KExqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7TGNvbS90aWJjby90aWJqbXMvYWRtaW4vVGliam1zQWRtaW47TGphdmEvdXRpbC9jb25jdXJyZW50L0NvdW50RG93bkxhdGNoO0xqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEADGlzSW5mb1VzZWZ1bAEAFShMamF2YS9sYW5nL09iamVjdDspWgEADVN0YWNrTWFwVGFibGUHAHoBAANydW4BAAMoKVYHAF8HAGEHAHYHAGYHAHIBAApTb3VyY2VGaWxlAQASRU1TSmF2YWludm9rZS5qYXZhDAA0AD8MACwALQwALgAvDAAwADEMADIAMwcAewwAOAA5DAB8AH0HAH4BABVDb25uZWN0aW9uRmFjdG9yeUluZm8HAHoMAH8AgAEACi5Hcm91cEluZm8BAAkuVXNlckluZm8BAAtWZXJzaW9uSW5mbwEABEluZm8MAIEAggwAgwA5DACEAIUMAIYAhwcAiAwAiQCKAQABJAwAiwCCAQAQamF2YS9sYW5nL09iamVjdAwAjACNAQAUamF2YS91dGlsL0xpbmtlZExpc3QMAI4AOwwAjwCQDACRAJIBABNbTGphdmEvbGFuZy9PYmplY3Q7AQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAOgA7BwCTDACUAJUHAJYMAJcAmAcAmQwAmgCbDACcAJ0HAJ4HAJ8MAKAAPwEAE2phdmEvbGFuZy9UaHJvd2FibGUMAKEAogwAowCdDACkAKUBACdFTVNKYXZhL0VNU0phdmFpbnZva2UkRW1zU3RhdHNFeHRyYWN0b3IBABFFbXNTdGF0c0V4dHJhY3RvcgEADElubmVyQ2xhc3NlcwEAEmphdmEvbGFuZy9SdW5uYWJsZQEAEGphdmEvbGFuZy9TdHJpbmcBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAA9qYXZhL2xhbmcvQ2xhc3MBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEACGVuZHNXaXRoAQAVKExqYXZhL2xhbmcvU3RyaW5nOylaAQAIdG9TdHJpbmcBAAZsZW5ndGgBAAMoKUkBAAZjaGFyQXQBAAQoSSlDAQATamF2YS9sYW5nL0NoYXJhY3RlcgEAB2lzRGlnaXQBAAQoQylaAQAKc3RhcnRzV2l0aAEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAA2FkZAEAB2lzRW1wdHkBAAMoKVoBAAZyZW1vdmUBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAFUVNU0phdmEvRU1TSmF2YWludm9rZQEAC3ByZXBhcmVEYXRhAQA4KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAphY2Nlc3MkMDAwAQAuKClMamF2YS91dGlsL2NvbmN1cnJlbnQvQ29uY3VycmVudExpbmtlZFF1ZXVlOwEAKmphdmEvdXRpbC9jb25jdXJyZW50L0NvbmN1cnJlbnRMaW5rZWRRdWV1ZQEAI2phdmEvdXRpbC9jb25jdXJyZW50L0NvdW50RG93bkxhdGNoAQAJY291bnREb3duAQAIZ2V0Q2F1c2UBABcoKUxqYXZhL2xhbmcvVGhyb3dhYmxlOwEACmFjY2VzcyQyMDABAAphY2Nlc3MkMTAwAQApKExqYXZhL2xhbmcvVGhyb3dhYmxlOylMamF2YS9sYW5nL1N0cmluZzsAIQAqABYAAQArAAQAAgAsAC0AAAACAC4ALwAAAAIAMAAxAAAAAgAyADMAAAAEAAEANAA1AAEANgAAAGoAAgAFAAAALiq3AAEqAbUAAioBtQADKgG1AAQqAbUABSortQACKi21AAMqLLUABCoZBLUABbEAAAABADcAAAAqAAoAAABvAAQAagAJAGsADgBsABMAbQAYAHAAHQBxACIAcgAnAHMALQB0AAEAOAA5AAEANgAAACAAAQABAAAACCq0AAK2AAawAAAAAQA3AAAABgABAAAAdgACADoAOwABADYAAACsAAIABAAAAF0rtgAHtgAITSwSCbYACpoAHiwSC7YACpoAFSwSDLYACpoADCwSDbYACpkABQOsLBIOtgAPmQAFBKwrtgAQTi22ABGZABctA7YAErgAE5oADC0SFLYAFZkABQOsA6wAAAACADcAAAAmAAkAAAB6AAgAewAsAHwALgB9ADcAfgA5AH8APgCAAFkAgQBbAIIAPAAAABEABfwALAcAPQEK/AAfBwA9AQABAD4APwABADYAAAHMAAMACgAAAMMqtAACKrQABAO9ABa2ABdMuwAYWbcAGU0sK7YAGlcstgAbmgBoLLYAHE4twAAdwAAdOgQZBDoFGQW+NgYDNgcVBxUGogAXGQUVBzI6CCwZCLYAGleEBwGn/+inAC06BCottwAfmQAjLSq0AAW4ACA6BRkFxgAUsgAhGQW2ACK4ACMZBbYAJFen/5cqtAADtgAlpwAxTCu2ACfGAAgrtgAnTLgAKCu4ACm2ACRXKrQAA7YAJacADzoJKrQAA7YAJRkJv7EABQAqAFoAXQAeAAAAigCUACYAAACKALYAAACUAKwAtgAAALYAuAC2AAAAAgA3AAAAbgAbAAAAhwAQAIgAGACJAB4AigAlAIsAKgCNADMAjgBNAI8AVACOAFoAmgBdAJIAXwCTAGcAlABxAJUAdgCWAH4AlwCHAJsAigCjAJEApACUAJ0AlQCeAJwAnwChAKAArACjALMApAC2AKMAwgClADwAAABbAAr9AB4HAEAHAEH/ACAACAcAQgcAQAcAQQcAQAcAHQcAHQEBAAD/ABoABAcAQgcAQAcAQQcAQAAAQgcAQ/oAKfkAAkkHAET8AAwHAET/ABQAAQcAQgABBwBECwACAEUAAAACAEYAeAAAAAoAAQAqAGgAdwAJ</byteCode>
                </class>
                <class>
                    <name>EMSJavainvoke</name>
                    <byteCode></byteCode>
                </class>
            </byteCode>
        </config>
        <pd:inputBindings>
            <javaCodeActivityInput>
                <xsl:if test="$HTTP-Receiver/ProcessStarterOutput/parameters/last">
                    <last>
                        <xsl:value-of select="$HTTP-Receiver/ProcessStarterOutput/parameters/last"/>
                    </last>
                </xsl:if>
                <xsl:if test="$HTTP-Receiver/ProcessStarterOutput/RequestURI">
                    <path>
                        <xsl:value-of select="$HTTP-Receiver/ProcessStarterOutput/RequestURI"/>
                    </path>
                </xsl:if>
            </javaCodeActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Send HTTP Response">
        <pd:type>com.tibco.plugin.http.HTTPResponseActivity</pd:type>
        <pd:resourceType>httppalette.httpWebResponse</pd:resourceType>
        <pd:x>613</pd:x>
        <pd:y>95</pd:y>
        <config>
            <closeConnection>true</closeConnection>
            <eventSource>HTTP Receiver</eventSource>
            <flushResponse>true</flushResponse>
            <Headers>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="StatusLine" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Type" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Set-Cookie" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Pragma" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Location" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </Headers>
        </config>
        <pd:inputBindings>
            <ResponseActivityInput>
                <binaryContent>
                    <xsl:value-of select="$GZIPCompress/Output/Body"/>
                </binaryContent>
                <Headers>
                    <Content-Type>
                        <xsl:value-of select="$invoke/javaCodeActivityOutput/contentType"/>
                    </Content-Type>
                </Headers>
                <DynamicHeaders>
                    <xsl:for-each select="$GZIPCompress/Output/*[position()>1]">
                        <Header>
                            <Name>
                                <xsl:value-of select="local-name()"/>
                            </Name>
                            <Value>
                                <xsl:value-of select="."/>
                            </Value>
                        </Header>
                    </xsl:for-each>
                </DynamicHeaders>
            </ResponseActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log Err">
        <pd:type>com.tibco.pe.core.WriteToLogActivity</pd:type>
        <pd:resourceType>ae.activities.log</pd:resourceType>
        <pd:x>350</pd:x>
        <pd:y>170</pd:y>
        <config>
            <role>User</role>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <message>
                    <xsl:value-of select="$invoke/javaCodeActivityOutput/errorMessages"/>
                </message>
                <msgCode>
                    <xsl:value-of select="'EMS_METRICS_ERROR'"/>
                </msgCode>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GZIPCompress">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>458</pd:x>
        <pd:y>93</pd:y>
        <config>
            <processName>/GZIPCompress.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <Text>
                    <xsl:value-of select="$invoke/javaCodeActivityOutput/content"/>
                </Text>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>HTTP Receiver</pd:from>
        <pd:to>invoke</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>invoke</pd:from>
        <pd:to>GZIPCompress</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Send HTTP Response</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>invoke</pd:from>
        <pd:to>Log Err</pd:to>
        <pd:xpathDescription>err</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($invoke/javaCodeActivityOutput/errorMessages)&gt;2</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Log Err</pd:from>
        <pd:to>GZIPCompress</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GZIPCompress</pd:from>
        <pd:to>Send HTTP Response</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>